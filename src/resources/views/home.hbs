<label for="file-input" class="col-span-full">
    <label for="file-input" class="block text-sm font-medium leading-6 text-gray-900">Cover photo</label>
    <div class="mt-2 flex justify-center rounded-lg border border-dashed border-gray-900/25 px-6 py-10">
        <div class="text-center">
            <svg class="mx-auto h-12 w-12 text-gray-300" viewBox="0 0 24 24" fill="currentColor" aria-hidden="true">
                <path fill-rule="evenodd"
                    d="M1.5 6a2.25 2.25 0 012.25-2.25h16.5A2.25 2.25 0 0122.5 6v12a2.25 2.25 0 01-2.25 2.25H3.75A2.25 2.25 0 011.5 18V6zM3 16.06V18c0 .414.336.75.75.75h16.5A.75.75 0 0021 18v-1.94l-2.69-2.689a1.5 1.5 0 00-2.12 0l-.88.879.97.97a.75.75 0 11-1.06 1.06l-5.16-5.159a1.5 1.5 0 00-2.12 0L3 16.061zm10.125-7.81a1.125 1.125 0 112.25 0 1.125 1.125 0 01-2.25 0z"
                    clip-rule="evenodd" />
            </svg>
            <div class="mt-4 flex text-sm leading-6 text-gray-600">
                <label for="file-upload"
                    class="relative cursor-pointer rounded-md bg-white font-semibold text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-600 focus-within:ring-offset-2 hover:text-indigo-500">
                    <span>Upload a file</span>
                    <input id="file-input"  type="file" class="sr-only">
                </label>
                <p class="pl-1">or drag and drop</p>
            </div>
            <p class="text-xs leading-5 text-gray-600">XLSX up to 10MB</p>
        </div>
    </div>
</label>
<form action="/" method="post" class="flex flex-wrap justify-center">
    <button type="button" onclick="btnSendMail()" class="rounded-md mt-3 bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Save</button>
    <textarea name="output" id="output" style="width: 100%;margin-top: 20px;" rows="25"></textarea>
</form>
<div id="loading" class="fixed z-50 w-full h-full top-0 hidden" style="background-color: #00000040;">
    <div class="flex flex-col items-center justify-center w-full h-[100vh] text-gray-900 dark:text-gray-100 dark:bg-gray-950">
        <div class="mb-3">
            <h1 class="text-xl md:text-7xl font-bold flex items-center">L<svg stroke="currentColor" fill="currentColor" stroke-width="0"
                viewBox="0 0 24 24" class="animate-spin" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg">
                <path
                d="M12 2C17.5228 2 22 6.47715 22 12C22 17.5228 17.5228 22 12 22C6.47715 22 2 17.5228 2 12C2 6.47715 6.47715 2 12 2ZM13.6695 15.9999H10.3295L8.95053 17.8969L9.5044 19.6031C10.2897 19.8607 11.1286 20 12 20C12.8714 20 13.7103 19.8607 14.4956 19.6031L15.0485 17.8969L13.6695 15.9999ZM5.29354 10.8719L4.00222 11.8095L4 12C4 13.7297 4.54894 15.3312 5.4821 16.6397L7.39254 16.6399L8.71453 14.8199L7.68654 11.6499L5.29354 10.8719ZM18.7055 10.8719L16.3125 11.6499L15.2845 14.8199L16.6065 16.6399L18.5179 16.6397C19.4511 15.3312 20 13.7297 20 12L19.997 11.81L18.7055 10.8719ZM12 9.536L9.656 11.238L10.552 14H13.447L14.343 11.238L12 9.536ZM14.2914 4.33299L12.9995 5.27293V7.78993L15.6935 9.74693L17.9325 9.01993L18.4867 7.3168C17.467 5.90685 15.9988 4.84254 14.2914 4.33299ZM9.70757 4.33329C8.00021 4.84307 6.53216 5.90762 5.51261 7.31778L6.06653 9.01993L8.30554 9.74693L10.9995 7.78993V5.27293L9.70757 4.33329Z">
                </path>
            </svg> ading . . .</h1>
        </div>
        <div class="mt-5 bg-gray-200 rounded-full dark:bg-gray-700 w-4/12">
            <div id="progress" class="bg-blue-600 text-xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full" style="width: 0%"> 0</div>
        </div>
    </div>
</div>
<script>
    const loaddingDom = document.getElementById('loading');
    const progress = document.getElementById('progress');
    document.getElementById('file-input').addEventListener('change', function (e) {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = function (e) {
            const data = new Uint8Array(e.target.result);
            const workbook = XLSX.read(data, { type: 'array' });
            // Lấy sheet đầu tiên (hoặc bạn có thể lấy sheet cụ thể theo tên)
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            // Lấy thông tin về các ô bị gộp
            const merges = worksheet['!merges'];
            // Chuyển đổi dữ liệu trong sheet thành dạng JSON
            const jsonData = XLSX.utils.sheet_to_json(worksheet);
            // Hiển thị dữ liệu
            document.getElementById('output').value = JSON.stringify(jsonData, null, 2);
        };
        reader.readAsArrayBuffer(file);
    });
    let countSucceeded = 0;
    let countFailed = 0;
    const btnSendMail = async () => {
        loaddingDom.classList.remove('hidden');
        const data = JSON.parse(document.getElementById('output').value);
        for (const row of data) {
            await new Promise(resolve => resolve(sendMailFunc(row)));  // Chờ 1 giây trước khi gửi email tiếp theo
        }
    }
    const sendMailFunc = async (item) => {
        const data = JSON.parse(document.getElementById('output').value);
        const myHeaders = new Headers();
        myHeaders.append("Content-Type", "application/json");
        const raw = JSON.stringify(item);
        const requestOptions = {
            method: "POST",
            headers: myHeaders,
            body: raw,
            redirect: "follow"
        };
        try {
            await fetch("http://localhost:5001/send-mail", requestOptions)
            let percent = ((countSucceeded + 1) * 100) / (data.length);
            progress.style.width = `${Math.floor(percent)}%`;
            progress.innerText = `${countSucceeded + 1}/${data.length}`;
            countSucceeded += 1;
            if(countSucceeded >= data.length){
                setTimeout(() => {
                    loaddingDom.classList.add('hidden')
                    countSucceeded = 0;
                },100)
            }
        } catch (error) {
            console.error(error);
            countFailed += 1
        };
    }
</script>